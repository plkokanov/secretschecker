//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright (c) SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	config "github.com/plkokanov/secretschecker/pkg/apis/config"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	componentbaseconfig "k8s.io/component-base/config"
	klog "k8s.io/klog"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*SecretsCheckerConfiguration)(nil), (*config.SecretsCheckerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_SecretsCheckerConfiguration_To_config_SecretsCheckerConfiguration(a.(*SecretsCheckerConfiguration), b.(*config.SecretsCheckerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*config.SecretsCheckerConfiguration)(nil), (*SecretsCheckerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_SecretsCheckerConfiguration_To_v1alpha1_SecretsCheckerConfiguration(a.(*config.SecretsCheckerConfiguration), b.(*SecretsCheckerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*SecretsCheckerControllerConfiguration)(nil), (*config.SecretsCheckerControllerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_SecretsCheckerControllerConfiguration_To_config_SecretsCheckerControllerConfiguration(a.(*SecretsCheckerControllerConfiguration), b.(*config.SecretsCheckerControllerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*config.SecretsCheckerControllerConfiguration)(nil), (*SecretsCheckerControllerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_SecretsCheckerControllerConfiguration_To_v1alpha1_SecretsCheckerControllerConfiguration(a.(*config.SecretsCheckerControllerConfiguration), b.(*SecretsCheckerControllerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ShootSecretsControllerConfiguration)(nil), (*config.ShootSecretsControllerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ShootSecretsControllerConfiguration_To_config_ShootSecretsControllerConfiguration(a.(*ShootSecretsControllerConfiguration), b.(*config.ShootSecretsControllerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*config.ShootSecretsControllerConfiguration)(nil), (*ShootSecretsControllerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_ShootSecretsControllerConfiguration_To_v1alpha1_ShootSecretsControllerConfiguration(a.(*config.ShootSecretsControllerConfiguration), b.(*ShootSecretsControllerConfiguration), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_SecretsCheckerConfiguration_To_config_SecretsCheckerConfiguration(in *SecretsCheckerConfiguration, out *config.SecretsCheckerConfiguration, s conversion.Scope) error {
	out.GardenClientConnection = in.GardenClientConnection
	out.SeedClientConnection = in.SeedClientConnection
	if err := Convert_v1alpha1_SecretsCheckerControllerConfiguration_To_config_SecretsCheckerControllerConfiguration(&in.Controllers, &out.Controllers, s); err != nil {
		return err
	}
	out.LeaderElection = (*componentbaseconfig.LeaderElectionConfiguration)(unsafe.Pointer(in.LeaderElection))
	out.LogLevel = in.LogLevel
	out.LogFormat = in.LogFormat
	out.KubernetesLogLevel = klog.Level(in.KubernetesLogLevel)
	out.Debugging = (*componentbaseconfig.DebuggingConfiguration)(unsafe.Pointer(in.Debugging))
	return nil
}

// Convert_v1alpha1_SecretsCheckerConfiguration_To_config_SecretsCheckerConfiguration is an autogenerated conversion function.
func Convert_v1alpha1_SecretsCheckerConfiguration_To_config_SecretsCheckerConfiguration(in *SecretsCheckerConfiguration, out *config.SecretsCheckerConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha1_SecretsCheckerConfiguration_To_config_SecretsCheckerConfiguration(in, out, s)
}

func autoConvert_config_SecretsCheckerConfiguration_To_v1alpha1_SecretsCheckerConfiguration(in *config.SecretsCheckerConfiguration, out *SecretsCheckerConfiguration, s conversion.Scope) error {
	out.GardenClientConnection = in.GardenClientConnection
	out.SeedClientConnection = in.SeedClientConnection
	if err := Convert_config_SecretsCheckerControllerConfiguration_To_v1alpha1_SecretsCheckerControllerConfiguration(&in.Controllers, &out.Controllers, s); err != nil {
		return err
	}
	out.LeaderElection = (*componentbaseconfig.LeaderElectionConfiguration)(unsafe.Pointer(in.LeaderElection))
	out.LogLevel = in.LogLevel
	out.LogFormat = in.LogFormat
	out.KubernetesLogLevel = klog.Level(in.KubernetesLogLevel)
	out.Debugging = (*componentbaseconfig.DebuggingConfiguration)(unsafe.Pointer(in.Debugging))
	return nil
}

// Convert_config_SecretsCheckerConfiguration_To_v1alpha1_SecretsCheckerConfiguration is an autogenerated conversion function.
func Convert_config_SecretsCheckerConfiguration_To_v1alpha1_SecretsCheckerConfiguration(in *config.SecretsCheckerConfiguration, out *SecretsCheckerConfiguration, s conversion.Scope) error {
	return autoConvert_config_SecretsCheckerConfiguration_To_v1alpha1_SecretsCheckerConfiguration(in, out, s)
}

func autoConvert_v1alpha1_SecretsCheckerControllerConfiguration_To_config_SecretsCheckerControllerConfiguration(in *SecretsCheckerControllerConfiguration, out *config.SecretsCheckerControllerConfiguration, s conversion.Scope) error {
	out.ShootSecrets = (*config.ShootSecretsControllerConfiguration)(unsafe.Pointer(in.ShootSecrets))
	return nil
}

// Convert_v1alpha1_SecretsCheckerControllerConfiguration_To_config_SecretsCheckerControllerConfiguration is an autogenerated conversion function.
func Convert_v1alpha1_SecretsCheckerControllerConfiguration_To_config_SecretsCheckerControllerConfiguration(in *SecretsCheckerControllerConfiguration, out *config.SecretsCheckerControllerConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha1_SecretsCheckerControllerConfiguration_To_config_SecretsCheckerControllerConfiguration(in, out, s)
}

func autoConvert_config_SecretsCheckerControllerConfiguration_To_v1alpha1_SecretsCheckerControllerConfiguration(in *config.SecretsCheckerControllerConfiguration, out *SecretsCheckerControllerConfiguration, s conversion.Scope) error {
	out.ShootSecrets = (*ShootSecretsControllerConfiguration)(unsafe.Pointer(in.ShootSecrets))
	return nil
}

// Convert_config_SecretsCheckerControllerConfiguration_To_v1alpha1_SecretsCheckerControllerConfiguration is an autogenerated conversion function.
func Convert_config_SecretsCheckerControllerConfiguration_To_v1alpha1_SecretsCheckerControllerConfiguration(in *config.SecretsCheckerControllerConfiguration, out *SecretsCheckerControllerConfiguration, s conversion.Scope) error {
	return autoConvert_config_SecretsCheckerControllerConfiguration_To_v1alpha1_SecretsCheckerControllerConfiguration(in, out, s)
}

func autoConvert_v1alpha1_ShootSecretsControllerConfiguration_To_config_ShootSecretsControllerConfiguration(in *ShootSecretsControllerConfiguration, out *config.ShootSecretsControllerConfiguration, s conversion.Scope) error {
	out.ConcurrentSyncs = in.ConcurrentSyncs
	return nil
}

// Convert_v1alpha1_ShootSecretsControllerConfiguration_To_config_ShootSecretsControllerConfiguration is an autogenerated conversion function.
func Convert_v1alpha1_ShootSecretsControllerConfiguration_To_config_ShootSecretsControllerConfiguration(in *ShootSecretsControllerConfiguration, out *config.ShootSecretsControllerConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha1_ShootSecretsControllerConfiguration_To_config_ShootSecretsControllerConfiguration(in, out, s)
}

func autoConvert_config_ShootSecretsControllerConfiguration_To_v1alpha1_ShootSecretsControllerConfiguration(in *config.ShootSecretsControllerConfiguration, out *ShootSecretsControllerConfiguration, s conversion.Scope) error {
	out.ConcurrentSyncs = in.ConcurrentSyncs
	return nil
}

// Convert_config_ShootSecretsControllerConfiguration_To_v1alpha1_ShootSecretsControllerConfiguration is an autogenerated conversion function.
func Convert_config_ShootSecretsControllerConfiguration_To_v1alpha1_ShootSecretsControllerConfiguration(in *config.ShootSecretsControllerConfiguration, out *ShootSecretsControllerConfiguration, s conversion.Scope) error {
	return autoConvert_config_ShootSecretsControllerConfiguration_To_v1alpha1_ShootSecretsControllerConfiguration(in, out, s)
}
